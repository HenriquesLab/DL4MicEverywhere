name: Manually check a modified configuration.yaml

on:
  workflow_dispatch:
      
jobs:

  list_configs:
    name: Get the list of configuration files on the repository
    runs-on: [self-hosted, dl4miceverywhere-builder]
    outputs: 
        matrix: ${{ steps.list_configs.outputs.matrix }}
    steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: List configurations
          id: list_configs
          run: |
            configurations_list=$(ls ./notebooks/*/*/configuration.yaml)
            echo "Start"
            files_json="{\"include\":[{\"notebook\":\""
            echo "$files_json"
            first=true
            for file in $configurations_list; do
              echo "$file was changed"
              if [ "$first" = true ]; then
                files_json+=$file
                first=false
              else
                files_json+="\"},{\"notebook\":\""$file
              fi
              echo "$files_json"
            done
            files_json+="\"}]}"
            echo "$files_json"
            echo "matrix=$files_json" >> $GITHUB_OUTPUT
            echo "END"
        - name: Print matrix
          run: |
            echo ${{ steps.list_configs.outputs.matrix }}
    
  check_keys:
    if: ${{ needs.list_configs.outputs.matrix != '' }} 
    runs-on: [self-hosted, dl4miceverywhere-builder]
    strategy:
      # super important if you want to see all results, even if one fails
      # fail-fast is true by default
      fail-fast: false
      matrix: ${{ fromJson(needs.list_configs.outputs.matrix) }} 
    name: Check attributes/keys on modified configuration.yaml
    needs: list_configs

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - name: Check notebook_url attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: notebook_url
        with:
          cmd: yq '.notebook_url' '${{ matrix.notebook }}' 
      - name: Check requirements_url attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: requirements_url
        with:
          cmd: yq '.requirements_url' '${{ matrix.notebook }}' 
      - name: Check cuda_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: cuda_version
        with:
          cmd: yq '.cuda_version' '${{ matrix.notebook }}' 
      - name: Check ubuntu_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: ubuntu_version
        with:
          cmd: yq '.ubuntu_version' '${{ matrix.notebook }}' 
      - name: Check python_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: python_version
        with:
          cmd: yq '.python_version' '${{ matrix.notebook }}'
      - name: Check sections_to_remove attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: sections_to_remove
        with:
          cmd: yq '.sections_to_remove' '${{ matrix.notebook }}'  
      - name: Check version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: version
        with:
          cmd: yq '.version' '${{ matrix.notebook }}'  
      - name: Check description attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: description
        with:
          cmd: yq '.description' '${{ matrix.notebook }}'  
      - run: |
          if [[ 'null' = '${{ steps.notebook_url.outputs.result }}' ]] ; then 
            echo 'The key notebook_url is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.requirements_url.outputs.result }}' ]] ; then 
            echo 'The key requirements_url is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.cuda_version.outputs.result }}' ]] ; then 
            echo 'The key cuda_version is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.ubuntu_version.outputs.result }}' ]] ; then 
            echo 'The key ubuntu_version is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.python_version.outputs.result }}' ]] ; then 
            echo 'The key python_version is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.sections_to_remove.outputs.result }}' ]] ; then 
            echo 'The key sections_to_remove is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.version.outputs.result }}' ]] ; then 
            echo 'The key version is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.description.outputs.result }}' ]] ; then 
            echo 'The key description is not in the configuration.yaml file.' 
            exit 1
          else 
            echo 'The configuration.yaml file is defined with all its keys.'
          fi
  
  check_urls:  
    runs-on: [self-hosted, dl4miceverywhere-builder]
    strategy:
      # super important if you want to see all results, even if one fails
      # fail-fast is true by default
      fail-fast: false
      matrix: ${{ fromJson(needs.list_configs.outputs.matrix) }} 

    name: Check notebook's and requirements' URLs
    needs: [check_keys, list_configs]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
            fetch-depth: 0
      - name: Extract the notebook URL
        id: extract_nb_url
        uses: mikefarah/yq@master
        with:
          cmd: yq '.notebook_url' '${{ matrix.notebook }}' 
      - name: Extract the requirements URL
        id: extract_rq_url
        uses: mikefarah/yq@master
        with:
          cmd: yq '.requirements_url' '${{ matrix.notebook }}' 
      - name: Check that notebook's URL exists
        uses: filiph/linkcheck@2.0.23
        with:
          arguments: ${{ steps.extract_nb_url.outputs.result }}
      - name: Check that requirements' URL exists
        uses: filiph/linkcheck@2.0.23
        with:
          arguments: ${{ steps.extract_rq_url.outputs.result }}

  check_docker_build_without_gpu:
    runs-on: [self-hosted, dl4miceverywhere-builder]
    strategy:
      # super important if you want to see all results, even if one fails
      # fail-fast is true by default
      fail-fast: false
      matrix: 
          architecture: [amd64, arm64]
          configuration: ${{ fromJson(needs.list_configs.outputs.matrix) }} 

    name: Check running 'docker build' for amd64 and arm64 without GPU
    needs: [check_keys, check_urls, list_configs]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3   

      - name: Check notebook_url attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: notebook_url
        with:
          cmd: yq '.notebook_url' '${{ matrix.configuration.notebook }}' 
      - name: Check requirements_url attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: requirements_url
        with:
          cmd: yq '.requirements_url' '${{ matrix.configuration.notebook }}' 
      - name: Check cuda_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: cuda_version
        with:
          cmd: yq '.cuda_version' '${{ matrix.configuration.notebook }}' 
      - name: Check ubuntu_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: ubuntu_version
        with:
          cmd: yq '.ubuntu_version' '${{ matrix.configuration.notebook }}' 
      - name: Check python_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: python_version
        with:
          cmd: yq '.python_version' '${{ matrix.configuration.notebook }}'
      - name: Check sections_to_remove attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: sections_to_remove
        with:
          cmd: yq '.sections_to_remove' '${{ matrix.configuration.notebook }}'  
      - name: Check version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: version
        with:
          cmd: yq '.version' '${{ matrix.configuration.notebook }}'  
      - name: Check description attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: description
        with:
          cmd: yq '.description' '${{ matrix.configuration.notebook }}'  

      - name: Get notebook_name
        id: notebook_name
        run: |
          aux_docker_tag="$(basename ${{ steps.notebook_url.outputs.result }} .ipynb)"
          notebook_name="$(echo $aux_docker_tag | tr '[:upper:]' '[:lower:]')"
          echo "value=$notebook_name" >> $GITHUB_OUTPUT
      
      - name: Build without GPU
        uses: docker/build-push-action@v5
        with:
          push: false
          platforms: linux/${{ matrix.architecture }}
          build-args: |
            BASE_IMAGE=ubuntu:${{ steps.ubuntu_version.outputs.result }}
            GPU_FLAG=0
            PYTHON_VERSION=${{ steps.python_version.outputs.result }}
            PATH_TO_NOTEBOOK=${{ steps.notebook_url.outputs.result }}
            PATH_TO_REQUIREMENTS=${{ steps.requirements_url.outputs.result }}
            NOTEBOOK_NAME=${{ steps.notebook_name.outputs.value }}}
            SECTIONS_TO_REMOVE=${{ steps.sections_to_remove.outputs.result }}
            
          
  check_docker_build_with_gpu:
    runs-on: [self-hosted, dl4miceverywhere-builder]
    strategy:
      # super important if you want to see all results, even if one fails
      # fail-fast is true by default
      fail-fast: false
      matrix: 
          architecture: [amd64, arm64]
          configuration: ${{ fromJson(needs.list_configs.outputs.matrix) }} 

    name: Check running 'docker build' for amd64 and arm64 without GPU
    needs: [check_keys, check_urls, list_configs]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3   

      - name: Check notebook_url attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: notebook_url
        with:
          cmd: yq '.notebook_url' '${{ matrix.configuration.notebook }}' 
      - name: Check requirements_url attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: requirements_url
        with:
          cmd: yq '.requirements_url' '${{ matrix.configuration.notebook }}' 
      - name: Check cuda_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: cuda_version
        with:
          cmd: yq '.cuda_version' '${{ matrix.configuration.notebook }}' 
      - name: Check ubuntu_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: ubuntu_version
        with:
          cmd: yq '.ubuntu_version' '${{ matrix.configuration.notebook }}' 
      - name: Check python_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: python_version
        with:
          cmd: yq '.python_version' '${{ matrix.configuration.notebook }}'
      - name: Check sections_to_remove attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: sections_to_remove
        with:
          cmd: yq '.sections_to_remove' '${{ matrix.configuration.notebook }}'  
      - name: Check version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: version
        with:
          cmd: yq '.version' '${{ matrix.configuration.notebook }}'  
      - name: Check description attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: description
        with:
          cmd: yq '.description' '${{ matrix.configuration.notebook }}'  


      - name: Get notebook_name
        id: notebook_name
        run: |
          aux_docker_tag="$(basename ${{ steps.notebook_url.outputs.result }} .ipynb)"
          notebook_name="$(echo $aux_docker_tag | tr '[:upper:]' '[:lower:]')"
          echo "value=$notebook_name" >> $GITHUB_OUTPUT

      - name: Build with GPU
        uses: docker/build-push-action@v5
        with:
          push: false
          platforms: linux/${{ matrix.architecture }}
          build-args: |
            BASE_IMAGE=nvidia/cuda:${{ steps.cuda_version.outputs.result }}-base-ubuntu${{ steps.ubuntu_version.outputs.result }}
            GPU_FLAG=1
            PYTHON_VERSION=${{ steps.python_version.outputs.result }}
            PATH_TO_NOTEBOOK=${{ steps.notebook_url.outputs.result }}
            PATH_TO_REQUIREMENTS=${{ steps.requirements_url.outputs.result }}
            NOTEBOOK_NAME=${{ steps.notebook_name.outputs.value }}
            SECTIONS_TO_REMOVE=${{ steps.sections_to_remove.outputs.result }}
        
    
