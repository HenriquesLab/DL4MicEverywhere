name: Build Docker images for single configuration

on:
  workflow_call:
    inputs:
      config_file: # the variable you can use in place of a matrix
        required: true
        type: string

jobs:
  get_arguments:
    name: Extract arguments on each configuration
    runs-on: [self-hosted, dl4miceverywhere-builder]
    outputs:
      ubuntu_version: ${{ steps.ubuntu_version.outputs.result }}
      python_version: ${{ steps.python_version.outputs.result }}
      notebook_url: ${{ steps.notebook_url.outputs.result }}
      requirements_url: ${{ steps.requirements_url.outputs.result }}
      notebook_name: ${{ steps.notebook_name.outputs.value }}
      docker_tag: ${{ steps.docker_tag.outputs.value }}
      sections_to_remove: ${{ steps.sections_to_remove.outputs.result }}
      version: ${{ steps.version.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check notebook_url attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: notebook_url
        with:
          cmd: yq '.notebook_url' '${{ inputs.config_file }}' 
      - name: Check requirements_url attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: requirements_url
        with:
          cmd: yq '.requirements_url' '${{ inputs.config_file }}' 
      - name: Check cuda_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: cuda_version
        with:
          cmd: yq '.cuda_version' '${{ inputs.config_file }}' 
      - name: Check ubuntu_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: ubuntu_version
        with:
          cmd: yq '.ubuntu_version' '${{ inputs.config_file }}' 
      - name: Check python_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: python_version
        with:
          cmd: yq '.python_version' '${{ inputs.config_file }}'
      - name: Check sections_to_remove attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: sections_to_remove
        with:
          cmd: yq '.sections_to_remove' '${{ inputs.config_file }}'  
      - name: Check version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: version
        with:
          cmd: yq '.version' '${{ inputs.config_file }}'  

      - name: Get notebook_name
        id: notebook_name
        run: |
          notebook_name="$(basename ${{ steps.notebook_url.outputs.result }})"
          echo "value=$notebook_name" >> $GITHUB_OUTPUT
      - name: Get docker_tag
        id: docker_tag
        run: |
          aux_docker_tag="$(basename ${{ steps.notebook_url.outputs.result }} .ipynb)"
          final_docker_tag="$(echo $aux_docker_tag | tr '[:upper:]' '[:lower:]')"
          echo "value=$final_docker_tag" >> $GITHUB_OUTPUT

  build_amd64:
    name: Build Docker image on AMD64
    runs-on: [self-hosted, dl4miceverywhere-builder]
    needs: get_arguments
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Ubuntu-Runner
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-v${{ needs.get_arguments.outputs.version }}-amd64, henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-latest-amd64
          build-args: |
            BASE_IMAGE=ubuntu:${{ needs.get_arguments.outputs.ubuntu_version }}
            GPU_FLAG=0
            PYTHON_VERSION=${{ needs.get_arguments.outputs.python_version }}
            PATH_TO_NOTEBOOK=${{ needs.get_arguments.outputs.notebook_url }}
            PATH_TO_REQUIREMENTS=${{ needs.get_arguments.outputs.requirements_url }}
            NOTEBOOK_NAME=${{ needs.get_arguments.outputs.notebook_name }}
            SECTIONS_TO_REMOVE=${{ needs.get_arguments.outputs.sections_to_remove }}
      
      - name: Build and push Ubuntu-Runner
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-gpu-v${{ needs.get_arguments.outputs.version }}, henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-gpu-latest
          build-args: |
            BASE_IMAGE=ubuntu:${{ needs.get_arguments.outputs.ubuntu_version }}
            GPU_FLAG=1
            PYTHON_VERSION=${{ needs.get_arguments.outputs.python_version }}
            PATH_TO_NOTEBOOK=${{ needs.get_arguments.outputs.notebook_url }}
            PATH_TO_REQUIREMENTS=${{ needs.get_arguments.outputs.requirements_url }}
            NOTEBOOK_NAME=${{ needs.get_arguments.outputs.notebook_name }}
            SECTIONS_TO_REMOVE=${{ needs.get_arguments.outputs.sections_to_remove }}

  build_arm64:
    name: Build Docker image on ARM64
    runs-on: [self-hosted, macOS, ARM64]
    needs: get_arguments
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Ubuntu-Runner
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: true
          tags: henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-v${{ needs.get_arguments.outputs.version }}-arm64, henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-latest-arm64
          build-args: |
              BASE_IMAGE=ubuntu:${{ needs.get_arguments.outputs.ubuntu_version }}
              GPU_FLAG=0
              PYTHON_VERSION=${{ needs.get_arguments.outputs.python_version }}
              PATH_TO_NOTEBOOK=${{ needs.get_arguments.outputs.notebook_url }}
              PATH_TO_REQUIREMENTS=${{ needs.get_arguments.outputs.requirements_url }}
              NOTEBOOK_NAME=${{ needs.get_arguments.outputs.notebook_name }}
              SECTIONS_TO_REMOVE=${{ needs.get_arguments.outputs.sections_to_remove }}

  build-only-arm64:
    if: ${{ always() && contains(needs.build_amd64.result, 'failure') }}
    needs:
      - get_arguments
      - build_amd64
      - build_arm64
    runs-on:  [self-hosted, dl4miceverywhere-builder]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifest images
        run: |
          docker buildx imagetools create -t henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-v${{ needs.get_arguments.outputs.version }} \
          henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-v${{ needs.get_arguments.outputs.version }}-arm64
      
      - name: Create and push manifest images with latest
        run: |
          docker buildx imagetools create -t henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-latest \
          henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-latest-arm64
            
  build-only-amd64:
    if: ${{ always() && contains(needs.build_arm64.result, 'failure') }}
    needs:
      - get_arguments
      - build_amd64
      - build_arm64
    runs-on:  [self-hosted, dl4miceverywhere-builder]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifest images
        run: |
          docker buildx imagetools create -t henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-v${{ needs.get_arguments.outputs.version }} \
          henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-v${{ needs.get_arguments.outputs.version }}-amd64      
      - name: Create and push manifest images with latest
        run: |
          docker buildx imagetools create -t henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-latest \
          henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-latest-amd64 
  build-multi-architecture:
    needs:
      - get_arguments
      - build_amd64
      - build_arm64
    runs-on:  [self-hosted, dl4miceverywhere-builder]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push manifest images
        run: |
          docker buildx imagetools create -t henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-v${{ needs.get_arguments.outputs.version }} \
          henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-v${{ needs.get_arguments.outputs.version }}-amd64 \
          henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-v${{ needs.get_arguments.outputs.version }}-arm64
      
      - name: Create and push manifest images with latest
        run: |
          docker buildx imagetools create -t henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-latest \
          henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-latest-amd64 \
          henriqueslab/dl4miceverywhere:${{ needs.get_arguments.outputs.docker_tag }}-latest-arm64
