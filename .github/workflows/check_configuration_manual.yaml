name: Manually check a modified configuration.yaml

on:
  workflow_dispatch:
      
jobs:

  extract_changed_files:
    name: Get the list of configuration files on the repository
    runs-on: [self-hosted, dl4miceverywhere-builder]
    outputs: 
        matrix: ${{ steps.list_configs.outputs.matrix }}
    steps:
        - name: Checkout
          uses: actions/checkout@v4
        - name: List configurations
          id: list_configs
          run: |
            configurations_list=$(ls ./notebooks/*/*/configuration.yaml)
            echo "Start"
            files_json="{\"include\":[{\"notebook\":\""
            echo "$files_json"
            first=true
            for file in $configurations_list; do
              echo "$file was changed"
              if [ "$first" = true ]; then
                files_json+=$file
                first=false
              else
                files_json+="\"},{\"notebook\":\""$file
              fi
              echo "$files_json"
            done
            files_json+="\"}]}"
            echo "$files_json"
            echo "matrix=$files_json" >> $GITHUB_OUTPUT
            echo "END"
        - name: Print matrix
          run: |
            echo ${{ steps.list_configs.outputs.matrix }}
    
  check_keys:
    if: ${{ needs.extract_changed_files.outputs.matrix != '' }} 
    runs-on: [ubuntu-latest]
    strategy:
      # put fail-fast as false if you want to see all results even if one fails,
      # fail-fast is true by default
      fail-fast: false
      matrix: ${{ fromJson(needs.extract_changed_files.outputs.matrix) }} 
    name: Check attributes/keys on modified configuration.yaml
    needs: extract_changed_files
    
    outputs:
      ubuntu_version: ${{ steps.ubuntu_version.outputs.result }}
      cuda_version: ${{ steps.cuda_version.outputs.result }}
      python_version: ${{ steps.python_version.outputs.result }}
      notebook_url: ${{ steps.notebook_url.outputs.result }}
      requirements_url: ${{ steps.requirements_url.outputs.result }}
      notebook_name: ${{ steps.notebook_name.outputs.value }}
      docker_tag: ${{ steps.docker_tag.outputs.value }}
      sections_to_remove: ${{ steps.sections_to_remove.outputs.result }}
      description: ${{ steps.description.outputs.result }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check notebook_url attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: notebook_url
        with:
          cmd: yq '.config.dl4miceverywhere.notebook_url' '${{ matrix.notebook }}' 
      - name: Check requirements_url attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: requirements_url
        with:
          cmd: yq '.config.dl4miceverywhere.requirements_url' '${{ matrix.notebook }}' 
      - name: Check cuda_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: cuda_version
        with:
          cmd: yq '.config.dl4miceverywhere.cuda_version' '${{ matrix.notebook }}' 
      - name: Check ubuntu_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: ubuntu_version
        with:
          cmd: yq '.config.dl4miceverywhere.ubuntu_version' '${{ matrix.notebook }}' 
      - name: Check python_version attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: python_version
        with:
          cmd: yq '.config.dl4miceverywhere.python_version' '${{ matrix.notebook }}'
      - name: Check sections_to_remove attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: sections_to_remove
        with:
          cmd: yq '.config.dl4miceverywhere.sections_to_remove' '${{ matrix.notebook }}'  
      - name: Check docker_tag attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: docker_tag
        with:
          cmd: yq '.config.dl4miceverywhere.docker_hub_image' '${{ matrix.notebook }}' 
      - name: Check description attribute on configuration.yaml
        uses: mikefarah/yq@master
        id: description
        with:
          cmd: yq '.config.dl4miceverywhere.description' '${{ matrix.notebook }}' 
      - name: Get notebook_name
        id: notebook_name
        run: |
          notebook_name="$(basename ${{ steps.notebook_url.outputs.result }})"
          echo "value=$notebook_name" >> $GITHUB_OUTPUT

      - run: |
          if [[ 'null' = '${{ steps.notebook_url.outputs.result }}' ]] ; then 
            echo 'The key notebook_url is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.requirements_url.outputs.result }}' ]] ; then 
            echo 'The key requirements_url is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.cuda_version.outputs.result }}' ]] ; then 
            echo 'The key cuda_version is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.ubuntu_version.outputs.result }}' ]] ; then 
            echo 'The key ubuntu_version is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.python_version.outputs.result }}' ]] ; then 
            echo 'The key python_version is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.sections_to_remove.outputs.result }}' ]] ; then 
            echo 'The key sections_to_remove is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.docker_tag.outputs.result }}' ]] ; then 
            echo 'The key docker_hub_image is not in the configuration.yaml file.' 
            exit 1
          elif [[ 'null' = '${{ steps.description.outputs.result }}' ]] ; then 
            echo 'The key description is not in the configuration.yaml file.' 
            exit 1
          else 
            echo 'The configuration.yaml file is defined with all its keys.'
          fi

  check_docker_build_without_gpu:  
    if: ${{ needs.extract_changed_files.outputs.matrix != '' }} 
    runs-on: [ubuntu-latest]
    strategy:
      # super important if you want to see all results, even if one fails
      # fail-fast is true by default
      fail-fast: false
      matrix: ${{ fromJson(needs.extract_changed_files.outputs.matrix) }} 

    name: Check running 'docker build' for amd64 and arm64 WITHOUT GPU
    needs: [check_keys, extract_changed_files]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3   

      - name: Get notebook_name
        id: notebook_name
        run: |
          aux_docker_tag="$(basename ${{ needs.check_keys.outputs.notebook_url }} .ipynb)"
          notebook_name="$(echo $aux_docker_tag | tr '[:upper:]' '[:lower:]')"
          echo "value=$notebook_name" >> $GITHUB_OUTPUT
      
      - name: Build without GPU
        uses: docker/build-push-action@v5
        with:
          push: false
          platforms: linux/amd64,linux/arm64
          build-args: |
              BASE_IMAGE=ubuntu:${{ needs.check_keys.outputs.ubuntu_version }}
              GPU_FLAG=0
              PYTHON_VERSION=${{ needs.check_keys.outputs.python_version }}
              PATH_TO_NOTEBOOK=${{ needs.check_keys.outputs.notebook_url }}
              PATH_TO_REQUIREMENTS=${{ needs.check_keys.outputs.requirements_url }}
              NOTEBOOK_NAME=${{ needs.check_keys.outputs.notebook_name }}
              SECTIONS_TO_REMOVE=${{ needs.check_keys.outputs.sections_to_remove }}
            
          
  check_docker_build_with_gpu:  
    if: ${{ needs.extract_changed_files.outputs.matrix != '' }} 
    runs-on: [ubuntu-latest]
    strategy:
      # super important if you want to see all results, even if one fails
      # fail-fast is true by default
      fail-fast: false
      matrix: ${{ fromJson(needs.extract_changed_files.outputs.matrix) }} 

    name: Check running 'docker build' for amd64 WITH GPU
    needs: [check_keys, extract_changed_files]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3   

      - name: Build with GPU
        uses: docker/build-push-action@v5
        with:
          push: false
          platforms: linux/amd64
          build-args: |
            BASE_IMAGE=nvidia/cuda:${{ needs.check_keys.outputs.cuda_version }}-base-ubuntu${{ needs.check_keys.outputs.ubuntu_version }}
            GPU_FLAG=1
            PYTHON_VERSION=${{ needs.check_keys.outputs.python_version }}
            PATH_TO_NOTEBOOK=${{ needs.check_keys.outputs.notebook_url }}
            PATH_TO_REQUIREMENTS=${{ needs.check_keys.outputs.requirements_url }}
            NOTEBOOK_NAME=${{ needs.check_keys.outputs.notebook_name }}
            SECTIONS_TO_REMOVE=${{ needs.check_keys.outputs.sections_to_remove }}
    
